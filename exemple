typedef struct	s_env
{
	char	*name;
	char	*value;
	t_env	*prev;
	t_env	*next;
}				t_env;

int	init_env(t_data *data, char **env)
(
	int	i;

	i = 0;
	while (env[i])
	{
		env_lst_addback(data, env_lst_new(env[i]));
		i++;
	}
	return (i);
)

t_env	*env_lst_new(char *env)
{
	t_env	*new;
	char	**tab;

	tab = ft_split(env, '=');
	new = malloc(sizeof(t_env));
	new->name = tab[0];
	if (tab[1])
		new->value = tab[1];
	else
		new->value = ft_strdup("");
	new->prev = NULL;
	new->next = NULL;
	free(tab);

}

void	env_lst_addback(t_data *data, t_env *new)
{
	t_env	*ptr;

	ptr = data->copy_env;
	if (!ptr)
	{
		data->copy_env = new;
		return ;
	}
	while (ptr->next)
		ptr = ptr->next;
	ptr->next = new;
	new->next = ptr;
	return ;
}

char	*get_env_patron_3000(t_env *ptr, char *name)
{
	while (ptr)
	{
		if (ft_strcmp(name, ptr->name))
			return (ft_strdup(ptr->value));
		ptr = ptr->next;
	}
	return (ft_strdup(""));
}

int	has_equal(char *str)
{
	int	i;

	i = 0;
	while (str[i])
	{
		if (str[i] == '=')
			return (1);
		i++;
	}
	return (0);
}

void	modify_export(t_data *data, char *arg)
{
	t_env	*ptr;
	char	**tab;

	tab = NULL;
	ptr = data->copy_env;
	tab = ft_split(arg, '=');
	while (ptr)
	{
		if (ft_strcmp(tab[0], ptr->name) == 0)
		{
			if (tab[1] && has_equal(arg))
			{
				free(ptr->value);
				if (tab[1])
					ptr->value = ft_strdup(tab[1]);
				else
					ptr->value = ft_strdup("");
			}
			ft_free_tab(tab, NULL);
			return ;
		}
		if (ptr->next == NULL)
		{
			env_lst_addback(data, env_lst_new(arg));
			return ;
		}
		ptr = ptr->next;
	}
	ft_free_tab(tab, NULL);
}
